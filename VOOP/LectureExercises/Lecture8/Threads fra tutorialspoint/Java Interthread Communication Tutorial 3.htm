<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Java Interthread Communication Tutorial</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8"><LINK 
href="/favicon.ico" type=image/x-icon rel="shortcut icon">
<META 
content="Java, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, Packages, Collections, Networking, Multithreading, Generics, Multimedia, Serialization, GUI" 
name=Keywords>
<META 
content="Java Interthread Communication Tutorial -  Learning Java in simple and easy steps : A beginner's tutorial containing complete knowledge of Java Syntax Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, Packages, Collections, Networking, Multithreading, Generics, Multimedia, Serialization, GUI" 
name=description>
<META http-equiv=pragma content=no-cache>
<META http-equiv=cache-control content=no-cache><LINK 
href="http://www.tutorialspoint.com/print.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.6000.16981" name=GENERATOR></HEAD>
<BODY>
<P><B>Copyright © tutorialspoint.com</B></P>
<H1>Java - Interthread Communication</H1><A 
href="http://www.tutorialspoint.com/java/java_multithreading.htm"><IMG 
alt=previous src="http://www.tutorialspoint.com/images/previous.gif" 
border=0></A> <A 
href="http://www.tutorialspoint.com/java/java_multithreading.htm"><IMG alt=next 
src="http://www.tutorialspoint.com/images/next.gif" border=0></A> <!-- AddThis Bookmark Button BEGIN --><A 
onclick="addthis_url   = location.href; addthis_title = document.title; return addthis_click(this);" 
href="http://www.addthis.com/bookmark.php" target=_blank><IMG 
alt="AddThis Social Bookmark Button" 
src="http://www.tutorialspoint.com/images/add-this.gif" border=0></A>
<SCRIPT type=text/javascript>var addthis_pub = 'tutorialspoint';</SCRIPT>

<SCRIPT src="http://s9.addthis.com/js/widget.php?v=10" 
type=text/javascript></SCRIPT>
 <!-- AddThis Bookmark Button END --><BR><BR>
<P>Consider the classic queuing problem, where one thread is producing some data 
and another is consuming it. To make the problem more interesting, suppose that 
the producer has to wait until the consumer is finished before it generates more 
data.</P>
<P>In a polling system, the consumer would waste many CPU cycles while it waited 
for the producer to produce. Once the producer was finished, it would start 
polling, wasting more CPU cycles waiting for the consumer to finish, and so on. 
Clearly, this situation is undesirable.</P>
<P>To avoid polling, Java includes an elegant interprocess communication 
mechanism via the following methods:</P>
<UL>
  <LI>
  <P><B>wait( ):</B> This method tells the calling thread to give up the monitor 
  and go to sleep until some other thread enters the same monitor and calls 
  notify( ).</P>
  <LI>
  <P><B>notify( ):</B> This method wakes up the first thread that called wait( ) 
  on the same object.</P>
  <LI>
  <P><B>notifyAll( ):</B> This method wakes up all the threads that called wait( 
  ) on the same object.c The highest priority thread will run first.</P></LI></UL>
<P>These methods are implemented as <B>final</B> methods in Object, so all 
classes have them. All three methods can be called only from within a 
<B>synchronized</B> context.</P>
<P>These methods are declared within Object. Various forms of wait( ) exist that 
allow you to specify a period of time to wait.</P>
<H2>Example:</H2>
<P>The following sample program consists of four classes: Q, the queue that 
you're trying to synchronize; Producer, the threaded object that is producing 
queue entries; Consumer, the threaded object that is consuming queue entries; 
and PC, the tiny class that creates the single Q, Producer, and Consumer.</P>
<P>The proper way to write this program in Java is to use wait( ) and notify( ) 
to signal in both directions, as shown here:</P>
<TABLE class=src cellSpacing=5 cellPadding=5>
  <TBODY>
  <TR>
    <TD><PRE>class Q {
   int n;
   boolean valueSet = false;
   synchronized int get() {
      if(!valueSet)
      try {
         wait();
      } catch(InterruptedException e) {
         System.out.println("InterruptedException caught");
      }
      System.out.println("Got: " + n);
      valueSet = false;
      notify();
      return n;
   }

   synchronized void put(int n) {
      if(valueSet)
      try {
         wait();
      } catch(InterruptedException e) {
         System.out.println("InterruptedException caught");
      }
      this.n = n;
      valueSet = true;
      System.out.println("Put: " + n);
      notify();
   }
}

class Producer implements Runnable {
   Q q;
   Producer(Q q) {
      this.q = q;
      new Thread(this, "Producer").start();
   }

   public void run() {
      int i = 0;
      while(true) {
         q.put(i++);
      }
   }
}

class Consumer implements Runnable {
    Q q;
    Consumer(Q q) {
       this.q = q;
       new Thread(this, "Consumer").start();
    }
    public void run() {
       while(true) {
       q.get();
    }
  }
}
class PCFixed {
   public static void main(String args[]) {
      Q q = new Q();
      new Producer(q);
      new Consumer(q);
      System.out.println("Press Control-C to stop.");
   }
}
</PRE></TD></TR></TBODY></TABLE>
<P>Inside get( ), wait( ) is called. This causes its execution to suspend until 
the Producer notifies you that some data is ready.</P>
<P>When this happens, execution inside get( ) resumes. After the data has been 
obtained, get( ) calls notify( ). This tells Producer that it is okay to put 
more data in the queue.</P>
<P>Inside put( ), wait( ) suspends execution until the Consumer has removed the 
item from the queue. When execution resumes, the next item of data is put in the 
queue, and notify( ) is called. This tells the Consumer that it should now 
remove it.</P>
<P>Here is some output from this program, which shows the clean synchronous 
behavior:</P>
<TABLE class=src cellSpacing=5 cellPadding=5>
  <TBODY>
  <TR>
    <TD><PRE>Put: 1
Got: 1
Put: 2
Got: 2
Put: 3
Got: 3
Put: 4
Got: 4
Put: 5
Got: 5
</PRE></TD></TR></TBODY></TABLE><BR><A 
href="http://www.tutorialspoint.com/java/java_multithreading.htm"><IMG 
alt=previous src="http://www.tutorialspoint.com/images/previous.gif" 
border=0></A> <A 
href="http://www.tutorialspoint.com/java/java_multithreading.htm"><IMG alt=next 
src="http://www.tutorialspoint.com/images/next.gif" border=0></A> <A 
href="http://www.tutorialspoint.com/cgi-bin/printversion.cgi?tutorial=java&amp;file=java_thread_communication.htm" 
target=_blank><IMG alt="Printer Friendly" 
src="http://www.tutorialspoint.com/images/print.gif" border=0></A> <BR>
<P><B>Copyright © tutorialspoint.com</B></P></BODY></HTML>
